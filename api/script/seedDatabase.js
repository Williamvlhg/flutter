const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
require('dotenv').config();

const User = require('../models/User');
const Episode = require('../models/Episode');
const Character = require('../models/Character');
const News = require('../models/News');

// Fonction pour g√©n√©rer un slug √† partir d'un titre
const generateSlug = (title) => {
  return title
    .toLowerCase()
    .normalize('NFD') // D√©composer les caract√®res accentu√©s
    .replace(/[\u0300-\u036f]/g, '') // Supprimer les accents
    .replace(/[^a-z0-9\s-]/g, '') // Garder seulement lettres, chiffres, espaces et tirets
    .trim()
    .replace(/\s+/g, '-') // Remplacer espaces par des tirets
    .replace(/-+/g, '-') // √âviter les tirets multiples
    .substring(0, 100); // Limiter la longueur
};

const seedDatabase = async () => {
  try {
    // Connexion √† MongoDB Atlas
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://zaki:zaki@cluster0.r32uulx.mongodb.net/simpsons_park?retryWrites=true&w=majority&appName=Cluster0');
    console.log('üì¶ Connect√© √† MongoDB Atlas pour le seeding');

    // Nettoyer la base de donn√©es
    await Promise.all([
      User.deleteMany({}),
      Episode.deleteMany({}),
      Character.deleteMany({}),
      News.deleteMany({})
    ]);
    console.log('üßπ Base de donn√©es nettoy√©e');

    // CORRECTION: Supprimer l'index probl√©matique s'il existe
    try {
      await News.collection.dropIndex('slug_1');
      console.log('üóëÔ∏è Index slug supprim√©');
    } catch (error) {
      console.log('‚ÑπÔ∏è Index slug n\'existait pas ou d√©j√† supprim√©');
    }

    // Cr√©er un utilisateur admin avec mot de passe hash√©
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash('admin123', saltRounds);
    
    const adminUser = new User({
      email: 'admin@simpsonspark.com',
      username: 'admin',
      password: hashedPassword,
      isAdmin: true,
      isActive: true,
      profile: {
        firstName: 'Super',
        lastName: 'Admin'
      },
      isVerified: true,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    await adminUser.save();
    console.log('üë§ Utilisateur admin cr√©√© avec mot de passe s√©curis√©');

    // Cr√©er un utilisateur de test normal
    const testUserPassword = await bcrypt.hash('test123', saltRounds);
    const testUser = new User({
      email: 'test@simpsonspark.com',
      username: 'testuser',
      password: testUserPassword,
      isAdmin: false,
      profile: {
        firstName: 'Test',
        lastName: 'User'
      },
      isVerified: true
    });
    
    await testUser.save();
    console.log('üë§ Utilisateur de test cr√©√©');

    // Cr√©er des personnages principaux
    const characters = [
      {
        name: 'Homer Simpson',
        nameFr: 'Homer Simpson',
        description: 'P√®re de famille paresseux et amateur de bi√®re, travaille √† la centrale nucl√©aire de Springfield.',
        family: 'Simpson',
        job: 'Inspecteur de s√©curit√© nucl√©aire',
        isMajor: true,
        catchphrases: ['D\'oh!', 'Mmm... bi√®re', 'Woohoo!'],
        voiceActor: {
          english: 'Dan Castellaneta',
          french: 'Philippe Peythieu'
        }
      },
      {
        name: 'Marge Simpson',
        nameFr: 'Marge Simpson',
        description: 'M√®re de famille aimante et patiente, √©pouse d\'Homer et m√®re de Bart, Lisa et Maggie.',
        family: 'Simpson',
        job: 'Femme au foyer',
        isMajor: true,
        catchphrases: ['Mmm-hmm', 'Homer!'],
        voiceActor: {
          english: 'Julie Kavner',
          french: 'V√©ronique Augereau'
        }
      },
      {
        name: 'Bart Simpson',
        nameFr: 'Bart Simpson',
        description: 'Fils a√Æn√© de la famille Simpson, espi√®gle et rebelle.',
        family: 'Simpson',
        job: '√âcolier',
        age: 10,
        isMajor: true,
        catchphrases: ['Eat my shorts!', 'Don\'t have a cow, man!'],
        voiceActor: {
          english: 'Nancy Cartwright',
          french: 'Jo√´lle Guigui'
        }
      },
      {
        name: 'Lisa Simpson',
        nameFr: 'Lisa Simpson',
        description: 'Fille cadette tr√®s intelligente, joue du saxophone et d√©fend ses convictions.',
        family: 'Simpson',
        job: '√âcoli√®re',
        age: 8,
        isMajor: true,
        voiceActor: {
          english: 'Yeardley Smith',
          french: 'Aur√©lia Bruno'
        }
      },
      {
        name: 'Maggie Simpson',
        nameFr: 'Maggie Simpson',
        description: 'B√©b√© de la famille Simpson, toujours avec sa t√©tine.',
        family: 'Simpson',
        job: 'B√©b√©',
        age: 1,
        isMajor: true,
        voiceActor: {
          english: 'Diverses',
          french: 'Diverses'
        }
      },
      {
        name: 'Ned Flanders',
        nameFr: 'Ned Flanders',
        description: 'Voisin pieux et optimiste des Simpson.',
        family: 'Flanders',
        job: 'Propri√©taire du Leftorium',
        isMajor: true,
        catchphrases: ['Okily dokily!', 'Diddly'],
        voiceActor: {
          english: 'Harry Shearer',
          french: 'Pierre Laurent'
        }
      },
      {
        name: 'Mr. Burns',
        nameFr: 'M. Burns',
        description: 'Propri√©taire milliardaire et patron de la centrale nucl√©aire de Springfield.',
        family: 'Burns',
        job: 'PDG de la centrale nucl√©aire',
        isMajor: true,
        catchphrases: ['Excellent!', 'Release the hounds!'],
        voiceActor: {
          english: 'Harry Shearer',
          french: 'Alain Dorval'
        }
      },
      {
        name: 'Waylon Smithers',
        nameFr: 'Waylon Smithers',
        description: 'Assistant d√©vou√© et fid√®le de M. Burns.',
        family: 'Smithers',
        job: 'Assistant personnel',
        isMajor: false,
        voiceActor: {
          english: 'Harry Shearer',
          french: 'Didier Colfs'
        }
      }
    ];

    const createdCharacters = await Character.insertMany(characters);
    console.log(`üë• ${createdCharacters.length} personnages cr√©√©s`);

    // Cr√©er des √©pisodes de test
    const episodes = [
      {
        season: 1,
        episodeNumber: 1,
        title: 'Simpsons Roasting on an Open Fire',
        titleFr: 'No√´l blanc',
        summary: 'Premier √©pisode des Simpson o√π Homer d√©couvre qu\'il ne recevra pas de prime de No√´l.',
        airDate: new Date('1989-12-17'),
        duration: 22,
        characters: ['Homer Simpson', 'Marge Simpson', 'Bart Simpson', 'Lisa Simpson', 'Maggie Simpson'],
        mainCharacters: createdCharacters.slice(0, 5).map(c => c._id),
        views: 1250000,
        tags: ['premier √©pisode', 'no√´l', 'famille'],
        isSpecial: true,
        trivia: [
          {
            fact: 'Premier √©pisode officiel des Simpson',
            category: 'Production'
          }
        ]
      },
      {
        season: 1,
        episodeNumber: 2,
        title: 'Bart the Genius',
        titleFr: 'Bart le g√©nie',
        summary: 'Bart triche √† un test et est consid√©r√© comme un g√©nie.',
        airDate: new Date('1990-01-14'),
        duration: 22,
        characters: ['Homer Simpson', 'Marge Simpson', 'Bart Simpson', 'Lisa Simpson'],
        mainCharacters: [createdCharacters[0]._id, createdCharacters[1]._id, createdCharacters[2]._id, createdCharacters[3]._id],
        views: 890000,
        tags: ['√©cole', 'g√©nie', 'bart']
      },
      {
        season: 32,
        episodeNumber: 1,
        title: 'Undercover Burns',
        titleFr: 'Burns incognito',
        summary: 'M. Burns se fait passer pour un employ√© ordinaire.',
        airDate: new Date('2020-09-27'),
        duration: 22,
        characters: ['Homer Simpson', 'Mr. Burns'],
        mainCharacters: [createdCharacters[0]._id, createdCharacters[6]._id],
        views: 645000,
        tags: ['burns', 'incognito', 'travail']
      },
      {
        season: 2,
        episodeNumber: 1,
        title: 'Bart Gets an F',
        titleFr: 'Bart a une mauvaise note',
        summary: 'Bart risque de redoubler sa classe s\'il n\'am√©liore pas ses notes.',
        airDate: new Date('1990-10-11'),
        duration: 22,
        characters: ['Bart Simpson', 'Homer Simpson', 'Marge Simpson', 'Lisa Simpson'],
        mainCharacters: [createdCharacters[2]._id, createdCharacters[0]._id, createdCharacters[1]._id],
        views: 720000,
        tags: ['√©cole', 'notes', 'bart']
      }
    ];

    const createdEpisodes = await Episode.insertMany(episodes);
    console.log(`üì∫ ${createdEpisodes.length} √©pisodes cr√©√©s`);

    // Mettre √† jour les personnages avec leurs √©pisodes
    for (const character of createdCharacters) {
      const characterEpisodes = createdEpisodes.filter(ep => 
        ep.characters.includes(character.name) || ep.characters.includes(character.nameFr)
      );
      
      character.episodes = characterEpisodes.map(ep => ep._id);
      character.episodeCount = characterEpisodes.length;
      await character.save();
    }

    // CORRECTION: Cr√©er des actualit√©s avec slugs uniques
    const newsItems = [
      {
        title: 'Les Simpson renouvel√©s pour 4 saisons suppl√©mentaires',
        slug: generateSlug('Les Simpson renouvel√©s pour 4 saisons suppl√©mentaires'),
        content: 'Fox a officiellement renouvel√© Les Simpson pour quatre saisons suppl√©mentaires, garantissant la diffusion de la s√©rie jusqu\'en 2029. Cette d√©cision confirme le statut de s√©rie d\'animation la plus longue de l\'histoire de la t√©l√©vision am√©ricaine.\n\nLa s√©rie, cr√©√©e par Matt Groening, continue de captiver les audiences du monde entier avec son humour satirique et ses personnages iconiques.',
        author: adminUser._id,
        authorName: adminUser.username,
        category: 'actualit√©',
        status: 'published',
        isFeatured: true,
        tags: ['renouvellement', 'fox', 'saisons'],
        excerpt: 'Fox renouvelle Les Simpson pour quatre saisons suppl√©mentaires jusqu\'en 2029.',
        publishedAt: new Date(),
        viewCount: 1500
      },
      {
        title: 'Hommage √† Alf Clausen, compositeur l√©gendaire',
        slug: generateSlug('Hommage √† Alf Clausen compositeur l√©gendaire'),
        content: 'La communaut√© des Simpson rend hommage √† Alf Clausen, compositeur de plus de 600 √©pisodes de la s√©rie. Son travail musical a grandement contribu√© √† l\'identit√© sonore unique des Simpson.\n\nDepuis les d√©buts de la s√©rie, Clausen a cr√©√© des m√©lodies m√©morables qui accompagnent parfaitement l\'univers de Springfield.',
        author: adminUser._id,
        authorName: adminUser.username,
        category: 'actualit√©',
        status: 'published',
        tags: ['musique', 'hommage', 'alf clausen'],
        excerpt: 'Hommage au compositeur Alf Clausen qui a marqu√© l\'univers musical des Simpson.',
        publishedAt: new Date(Date.now() - 86400000),
        viewCount: 850
      },
      {
        title: 'Analyse : Springfield, miroir de l\'Am√©rique',
        slug: generateSlug('Analyse Springfield miroir de l Am√©rique'),
        content: 'Springfield repr√©sente l\'Am√©rique moyenne avec ses probl√®mes sociaux et politiques. Cette analyse explore comment la ville fictive refl√®te la soci√©t√© am√©ricaine contemporaine.\n\n√Ä travers ses habitants vari√©s et ses situations du quotidien, Springfield devient le laboratoire parfait pour observer et critiquer la soci√©t√© moderne.',
        author: adminUser._id,
        authorName: adminUser.username,
        category: 'analyse',
        status: 'published',
        tags: ['analyse', 'springfield', 'soci√©t√©'],
        excerpt: 'Comment Springfield refl√®te-t-elle la soci√©t√© am√©ricaine contemporaine ?',
        publishedAt: new Date(Date.now() - 172800000),
        viewCount: 1200
      },
      {
        title: 'Les Simpson c√©l√®brent leur 35e anniversaire',
        slug: generateSlug('Les Simpson c√©l√®brent leur 35e anniversaire'),
        content: 'Cette ann√©e marque le 35e anniversaire des Simpson depuis leur premi√®re apparition dans le Tracy Ullman Show. Un √©v√©nement qui m√©rite d\'√™tre c√©l√©br√© !\n\nDepuis 1987, la famille jaune la plus c√©l√®bre du monde n\'a cess√© de nous divertir et de critiquer notre soci√©t√© avec finesse et humour.',
        author: testUser._id,
        authorName: testUser.username,
        category: 'actualit√©',
        status: 'published',
        isFeatured: false,
        tags: ['anniversaire', 'c√©l√©bration', '35 ans'],
        excerpt: 'Les Simpson f√™tent leurs 35 ans d\'existence.',
        publishedAt: new Date(Date.now() - 259200000),
        viewCount: 950
      },
      {
        title: 'Matt Groening d√©voile ses inspirations pour cr√©er Homer',
        slug: generateSlug('Matt Groening d√©voile ses inspirations pour cr√©er Homer'),
        content: 'Dans une interview exclusive, Matt Groening r√©v√®le comment il a cr√©√© le personnage d\'Homer Simpson, s\'inspirant notamment de son propre p√®re et de Walter Matthau.',
        author: adminUser._id,
        authorName: adminUser.username,
        category: 'interview',
        status: 'published',
        tags: ['matt groening', 'homer', 'inspiration', 'cr√©ation'],
        excerpt: 'Matt Groening r√©v√®le ses inspirations pour cr√©er Homer Simpson.',
        publishedAt: new Date(Date.now() - 345600000),
        viewCount: 670
      }
    ];

    // CORRECTION: Ins√©rer les actualit√©s une par une pour √©viter les conflits de slug
    const createdNews = [];
    for (const newsItem of newsItems) {
      try {
        const news = await News.create(newsItem);
        createdNews.push(news);
        console.log(`üì∞ Actualit√© cr√©√©e: ${news.title}`);
      } catch (error) {
        if (error.code === 11000) {
          // Conflit de slug, g√©n√©rer un nouveau slug unique
          newsItem.slug = `${newsItem.slug}-${Date.now()}`;
          const news = await News.create(newsItem);
          createdNews.push(news);
          console.log(`üì∞ Actualit√© cr√©√©e avec slug modifi√©: ${news.title}`);
        } else {
          console.error(`‚ùå Erreur cr√©ation actualit√© "${newsItem.title}":`, error.message);
        }
      }
    }

    console.log(`üì∞ ${createdNews.length} actualit√©s cr√©√©es au total`);

    console.log('\n‚úÖ Seeding termin√© avec succ√®s !');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üîê IDENTIFIANTS ADMINISTRATEUR');
    console.log('üìß Email: admin@simpsonspark.com');
    console.log('üîë Password: admin123');
    console.log('üë§ R√¥le: Admin');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üß™ IDENTIFIANTS UTILISATEUR TEST');
    console.log('üìß Email: test@simpsonspark.com');
    console.log('üîë Password: test123');
    console.log('üë§ R√¥le: Utilisateur normal');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìä Statistiques:');
    console.log(`   - ${createdCharacters.length} personnages cr√©√©s`);
    console.log(`   - ${createdEpisodes.length} √©pisodes cr√©√©s`);
    console.log(`   - ${createdNews.length} actualit√©s cr√©√©es`);
    console.log(`   - 2 utilisateurs cr√©√©s`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error);
    console.error('Stack trace:', error.stack);
  } finally {
    await mongoose.connection.close();
    console.log('üì¶ Connexion MongoDB ferm√©e');
  }
};

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  seedDatabase();
}

module.exports = seedDatabase;